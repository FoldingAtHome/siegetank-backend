#! /usr/bin/env python

# Start services necessary to test the core.
import os
import subprocess
import time
import requests
import json
import base64
import gzip


def add_manager():
    reply = requests.post('https://127.0.0.1:8980/managers',
                          data=json.dumps({'email': 'test_user@gmail.com',
                                           'password': 'test_pass',
                                           'role': 'manager'}),
                          verify=False)
    assert reply.status_code == 200


def add_donor():
    reply = requests.post('https://127.0.0.1:8980/donors',
                          data=json.dumps({'username': 'test_donor',
                                           'email': 'test_donor@gmail.com',
                                           'password': 'test_donor_pass'}),
                          verify=False)
    assert reply.status_code == 200


def auth_manager():
    reply = requests.post('https://127.0.0.1:8980/managers/auth',
                          data=json.dumps({'email': 'test_user@gmail.com',
                                           'password': 'test_pass'}),
                          verify=False)
    return json.loads(reply.content.decode())['token']


def post_target(auth_token, stage='private'):
    system_url = 'http://www.stanford.edu/~yutongz/system.xml.gz'
    integrator_url = 'http://www.stanford.edu/~yutongz/integrator.xml.gz'
    system_xml = gzip.decompress(requests.get(system_url).content)
    integrator_xml = gzip.decompress(requests.get(integrator_url).content)
    encoded_system = base64.b64encode(gzip.compress(system_xml)).decode()
    encoded_intg = base64.b64encode(gzip.compress(integrator_xml)).decode()
    message = json.dumps({'description': 'foo',
                          'engine': 'openmm',
                          'engine_versions': ['6.0'],
                          'steps_per_frame': 10000,
                          'files': {'system.xml.gz.b64': encoded_system,
                                    'integrator.xml.gz.b64': encoded_intg
                                    },
                          'stage': stage
                          })
    reply = requests.post('https://127.0.0.1:8980/targets',
                          headers={'Authorization': auth_token},
                          verify=False,
                          data=message,
                          )
    return json.loads(reply.content.decode())['target_id']


def post_streams(target_id, state_xml, auth_token):
    encoded_state = base64.b64encode(gzip.compress(state_xml)).decode()
    message = json.dumps({'target_id': target_id,
                          'files': {'state.xml.gz.b64': encoded_state}})
    reply = requests.post('https://127.0.0.1:8980/streams',
                          headers={'Authorization': auth_token},
                          verify=False,
                          data=message
                          )
    assert reply.status_code == 200
    return json.loads(reply.content.decode())['stream_id']

if __name__ == '__main__':
    # if a pids.log exists, that means we need to do some cleanup!
    if os.path.exists('pids.log'):
        stop_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'stop_services')
        os.system(stop_path)

    cc_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                           '..', '..', 'cc')
    ws_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                           '..', '..', 'ws')

    pid1 = subprocess.Popen(cc_path, stdout=subprocess.PIPE, shell=True,
                            preexec_fn=lambda: os.setpgid(0, 0))
    time.sleep(1)
    pid2 = subprocess.Popen(ws_path, stdout=subprocess.PIPE, shell=True,
                            preexec_fn=lambda: os.setpgid(0, 0))

    with open('pids.log', 'w') as log:
        log.write(str(pid1.pid))
        log.write(' ')
        log.write(str(pid2.pid))

    try:
        add_manager()
    except Exception:
        pass
    try:
        add_donor()
    except Exception:
        pass

    token = auth_manager()
    # post a public target
    target_id = post_target(token, stage='public')
    state_url = 'http://www.stanford.edu/~yutongz/state.xml.gz'
    state_xml = gzip.decompress(requests.get(state_url).content)
    for i in range(10):
        post_streams(target_id, state_xml, token)

    target_id = post_target(token)
    post_streams(target_id, state_xml, token)

    # post a private target
    with open('target_ids.log', 'w') as log:
        log.write(str(target_id))
