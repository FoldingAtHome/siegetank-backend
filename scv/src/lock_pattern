mutex logic
===========

1. Guarantees: if an object is being modified, then it must exist.

// m = manager
// t = target
// s = stream

target create (infrequent)
--------------------------
m.Lock()
t.Lock()
t.Unlock()
m.Unlock()

target delete (infrequent)
--------------------------
m.Lock()
t.Lock()
// for each stream in t
// s.Lock()
t.Unlock()
m.Unlock()

add pre-made stream to existing target (infrequent)
--------------------------
m.Lock()
t.Lock()
s.Lock()
// create target if does not exist
// add stream to target
// add token to tokens
s.Unlock()
t.Unlock()
m.Unlock()

stream removal (infrequent)
--------------------------
m.Lock()
t.Lock()
s.Lock()
// deactivate stream if active
// deactivate stream as needed
// mark stream as removed
s.Unlock()
t.Unlock()
m.Unlock()

stream modify (infrequent)
--------------------------
m.RLock()
s.Lock()
// if stream has been removed, then die and do nothing.
s.Unlock()
m.RUnlock()

stream activation (frequent)
--------------------------
m.Lock() // add a token
t.Lock()
s.Lock()
// activate the stream
s.Unlock()
t.Unlock()
m.Unlock()

activestream modify (very frequent)
--------------------------
m.RLock()
s.Lock()
// stream may be inactive
// stream may be removed
s.Unlock()
m.Unlock()

stream deactivate (frequent)
--------------------------
m.Lock() // removing a token
t.Lock() // changing activestreams
s.Lock()
// deactivate the stream
s.Unlock()
t.Unlock()
m.Unlock()
